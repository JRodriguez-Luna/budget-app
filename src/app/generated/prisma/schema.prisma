// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// AUTH.JS MODELS (Required for NextAuth)
// ============================================================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  // Gamification fields
  xp    Int @default(0)
  level Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth.js relations (tracks login methods, not multiple user accounts)
  accounts       Account[] // OAuth providers linked to this user (Google, GitHub, etc.)
  sessions       Session[] // Active login sessions
  authenticators Authenticator[] // WebAuthn/passkey credentials

  // Budget app relations
  categories   Category[]
  transactions Transaction[]
  budgets      Budget[]
  goals        Goal[]
  achievements UserAchievement[]
  challenges   UserChallenge[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// ============================================================================
// BUDGETING
// ============================================================================

// Categories for organizing spending (Food, Gas, Entertainment, etc.)
model Category {
  id    String @id @default(cuid())
  name  String
  color String @default("#3B82F6") // For visual display

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  transactions Transaction[]
  budgets      Budget[]

  @@unique([userId, name]) // Can't have duplicate category names
}

// Budget limits per category (e.g., $500/month for groceries)
model Budget {
  id     String @id @default(cuid())
  amount Float // Budget limit
  spent  Float  @default(0) // How much spent so far
  month  String // Format: "2025-03" for March 2025

  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, categoryId, month]) // One budget per category per month
}

// Individual expenses
model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  description String
  date        DateTime @default(now())

  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
}

// Savings goals (e.g., "Save $5000 for vacation")
model Goal {
  id            String    @id @default(cuid())
  name          String
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  completed     Boolean   @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ============================================================================
// GAMIFICATION
// ============================================================================

// Master list of achievements (seed this with your achievements)
model Achievement {
  id          String @id @default(cuid())
  name        String @unique
  description String
  xpReward    Int
  icon        String @default("trophy")

  createdAt DateTime @default(now())

  users UserAchievement[]
}

// Tracks which achievements each user earned
model UserAchievement {
  id String @id @default(cuid())

  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  earnedAt DateTime @default(now())

  @@unique([userId, achievementId])
}

// Daily/weekly challenges
model Challenge {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String // "daily" or "weekly"
  xpReward    Int
  active      Boolean  @default(true)
  startDate   DateTime
  endDate     DateTime

  createdAt DateTime @default(now())

  users UserChallenge[]
}

// Tracks user progress on challenges
model UserChallenge {
  id        String  @id @default(cuid())
  progress  Int     @default(0) // Progress toward challenge goal
  completed Boolean @default(false)

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
  completedAt DateTime?

  @@unique([userId, challengeId])
}
